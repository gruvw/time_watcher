import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

tz.TZDateTime _nextInstanceOf(int hour, int minute) {
  final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
  tz.TZDateTime scheduledDate =
      tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
  if (scheduledDate.isBefore(now)) {
    scheduledDate = scheduledDate.add(const Duration(days: 1));
  }
  return scheduledDate;
}

Future<void> _scheduleDailyNotification(int id, int hour, int minute) {
  return FlutterLocalNotificationsPlugin().zonedSchedule(
    id,
    'Time Passes!',
    'It is $hour:$minute',
    _nextInstanceOf(hour, minute),
    NotificationDetails(
      android: AndroidNotificationDetails(
        'Time passes',
        'Time passes',
        channelDescription: 'Time passes description',
        playSound: true,
        enableVibration: true,
        timeoutAfter: 4 * 60 * 1000, // ASK instant timeout ?
        vibrationPattern: Int64List.fromList([0, 1000, 500, 1000]),
        // timeoutAfter:
      ),
    ),
    androidAllowWhileIdle: true,
    uiLocalNotificationDateInterpretation:
        UILocalNotificationDateInterpretation.absoluteTime,
    matchDateTimeComponents: DateTimeComponents.time,
  );
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()!
      .requestPermission();

  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');
  final DarwinInitializationSettings initializationSettingsDarwin =
      DarwinInitializationSettings(
    onDidReceiveLocalNotification: (id, title, body, payload) {},
  );
  const LinuxInitializationSettings initializationSettingsLinux =
      LinuxInitializationSettings(defaultActionName: 'Open notification');
  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
    iOS: initializationSettingsDarwin,
    macOS: initializationSettingsDarwin,
    linux: initializationSettingsLinux,
  );
  await flutterLocalNotificationsPlugin.initialize(
    initializationSettings,
    onDidReceiveNotificationResponse: (details) {},
  );

  tz.initializeTimeZones();
  tz.setLocalLocation(tz.getLocation("Europe/Zurich"));

  await flutterLocalNotificationsPlugin.cancelAll();

  int id = 0;

  int startH = 0;
  int endH = 23;
  int mIncr = 3;
  for (var hour = startH; hour <= endH; hour++) {
    for (var minute = 0; minute < 60; minute += mIncr) {
      await _scheduleDailyNotification(id++, hour, minute);
    }
  }

  print("done $id");

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(),
    );
  }
}
